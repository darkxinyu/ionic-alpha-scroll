{"version":3,"file":"order-by.js","sourceRoot":"","sources":["../../src/pipes/order-by.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AAChE,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;;;;IAQ1B,2BAAS,GAAT,UAAU,KAAU,EAAE,YAA0C;QAA1C,6BAAA,EAAA,kBAA0C;QAC9D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,KAAK,CAAC;SACd;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,WAAW,GAAW,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YACxF,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;;YAG7C,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;aAC3C;YAED,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SAC5D;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAW,YAAY,CAAC,CAAC;QAC3D,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;KAC7D;IAEO,0BAAQ,GAAhB,UAAiB,YAAiB;QAChC,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;KACnG;IAEO,+BAAa,GAArB,UAAsB,MAAc;QAClC,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,SAAS,KAAK,GAAG,CAAC;QAC/B,IAAI,QAAQ,GAAG,SAAS,IAAI,SAAS,KAAK,GAAG,CAAC;QAC9C,MAAM,CAAC,EAAE,KAAK,EAAE,MAAM,GAAG,MAAM,GAAG,KAAK,EAAE,QAAQ,EAAE,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC;KAC3F;IAEO,iCAAe,GAAvB,UAAwB,OAAsB;QAA9C,iBAQC;QAPC,IAAI,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;QAC5C,OAAO,CAAC,OAAO,CAAC,UAAA,SAAS;YACvB,IAAI,MAAM,GAAG,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACzC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;KACf;;gBA9CF,IAAI,SAAC;oBACJ,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,IAAI;iBACX;gBACA,UAAU;;;;kBAPX;;SAQa,OAAO","sourcesContent":["import { Injectable, Pipe, PipeTransform } from '@angular/core';\r\nimport * as _ from 'lodash';\r\n\r\n@Pipe({\r\n  name: 'orderBy',\r\n  pure: true\r\n})\r\n@Injectable()\r\nexport class OrderBy implements PipeTransform {\r\n  transform(input: any, orderConfigs: string | Array<string> = '+'): any {\r\n    if (!Array.isArray(input)) {\r\n      return input;\r\n    }\r\n\r\n    if (this.isSingle(orderConfigs)) {\r\n      let orderConfig: string = !Array.isArray(orderConfigs) ? orderConfigs : orderConfigs[0];\r\n      let config = this.parseProperty(orderConfig);\r\n\r\n      // Basic array\r\n      if (config.property === '') {\r\n        return _.orderBy(input, [], config.order);\r\n      }\r\n\r\n      return _.orderBy(input, [config.property], [config.order]);\r\n    }\r\n\r\n    let configs = this.parseProperties(<string[]>orderConfigs);\r\n    return _.orderBy(input, configs.properties, configs.orders);\r\n  }\r\n\r\n  private isSingle(orderConfigs: any): boolean {\r\n    return !Array.isArray(orderConfigs) || (Array.isArray(orderConfigs) && orderConfigs.length === 1);\r\n  }\r\n\r\n  private parseProperty(config: string): { order: string, property: string } {\r\n    let orderChar = config.substr(0, 1);\r\n    let isDesc = orderChar === '-';\r\n    let hasOrder = orderChar || orderChar === '+';\r\n    return { order: isDesc ? 'desc' : 'asc', property: hasOrder ? config.substr(1) : config };\r\n  }\r\n\r\n  private parseProperties(configs: Array<string>): { orders: Array<string>, properties: Array<string> } {\r\n    let result = { orders: [], properties: [] };\r\n    configs.forEach(configStr => {\r\n      let config = this.parseProperty(configStr);\r\n      result.orders.push(config.order);\r\n      result.properties.push(config.property);\r\n    });\r\n    return result;\r\n  }\r\n}"]}